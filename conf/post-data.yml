# ArrayList Posts
- !!models.Post
    category:  !!models.Category
               id: 1
    title:     Basics of ArrayLists
    content:   "<p>
                    <strong>ArrayList Quick Guide</strong>
                    <br>
                    <br>
                    General:
                    <br>
                    An ArrayList is one of the most popular data structures within java for simple Object storage. An ArrayList offers quite a bit more functionality compared to a regular Array.
                    <br>
                    <br>
                    Pros:
                    <br>
                    - Dynamic size
                    <br>
                    - Works with Generics
                    <br>
                    - Iterable
                    <br>
                    <br>
                    Declaration:
                    <br>
                    ArrayList<String> myArrList = new ArrayList<String>();
                    <br>
                    *You can replace 'String' with any Object Type
                    <br>
                    ** 'myArrList' is the variable name, you can name your ArrayList however you want
                    <br>
                    <br>
                    Commonly Used Methods:
                    <br>
                    add( Object o ) - puts reference to object into ArrayList
                    <br>
                    get( int index ) - retrieves object reference from ArrayList index position
                    <br>
                    size() - returns ArrayList size
                    <br>
                    remove( int index ) - removes the element at the specified position in this list. Shifts any subsequent elements to the left and returns the element that was removed from the list.
                    <br>
                    indexOf( Object o) - finds the index in this list of the first occurrence of the specified element
                    <br>
                    clear() - removes all of the elements
                    <br>
                    <br>
                    Example Code:
                    <br>
                    import java.util.ArrayList;
                    <br>
                    <br>
                    public class Ex01 {
                    <br>
                       public static void main(String[] args) {
                    <br>
                         &emsp;ArrayList<String> myArrList = new ArrayList<String>();
                    <br>
                           &emsp;&emsp;myArr.add(\"Bob\");
                    <br>
                           &emsp;&emsp;myArr.add(\"Joseph\");
                    <br>
                           &emsp;&emsp;myArr.add(\"Alan\");
                    <br>
                           &emsp;&emsp;myArr.add(\"Erika\");
                    <br>
                           &emsp;&emsp;myArr.add(\"Tyler\");
                    <br>
                           &emsp;&emsp;myArr.add(\"Jenn\");
                    <br>
                           &emsp;&emsp;myArr.add(\"Eric\");
                    <br>
                           &emsp;&emsp;myArr.add(\"Llama\");
                    <br>
                           &emsp;&emsp;myArr.add(\"Foo\");
                    <br>
                           &emsp;&emsp;myArr.add(\"Bar\");
                    <br>
                    <br>
                           &emsp;&emsp;myArr.remove(0);
                    <br>
                           &emsp;&emsp;myArr.remove(5);
                    <br>
                           &emsp;}
                    <br>
                    }
                  </p>"
    userName:  Drew
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 1
    title:     Helpful videos and links for ArrayList
    content:   <a href="http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html">Java 6 Documentation</a> <br>
               <a href="http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html">Java 7 Documentation</a> <br>
               <a href="http://developer.android.com/reference/java/util/ArrayList.html">Android Documentation</a> <br>
               <a href="http://stackoverflow.com/questions/2697182/how-to-use-an-array-list">StackOverflow Discussion</a> <br>
               <a href="http://en.wikipedia.org/wiki/Dynamic_array">Wikipedia Page on Dynamic Arrays</a> <br>
    userName:  Jerry
    isSticky:  true
    datePosted: 2000-09-10
    
- !!models.Post
    category:  !!models.Category
               id: 1
    title:     What are some differences between an Array and ArrayList?
    content:   It seems that Arrays and ArrayLists perform many of the same operations, so I am wondering what exactly are the differences between the two? Should I be using one over the other?
    userName:  Lisa
    isSticky:  false
    datePosted: 2000-11-10 12:00:13
    comments: 8
    votes: 5
    
- !!models.Post
    category:  !!models.Category
               id: 1
    title:     What are some Big-O for ArrayList operations?
    content:   I'm getting confused about Big-O, can someone explain with examples how to get the Big-O for ArrayList operations like sort?
    isSticky:  false
    userName:  Frank
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 10
    votes: 10
    
- !!models.Post
    category:  !!models.Category
               id: 1
    title:     So why would an ArrayList be better than an Array?
    content:   In which situations or programs would using an ArrayList be better? I am more comfortable with Arrays so would the benefits of using an ArrayList be worth it?
    userName:  Eric
    isSticky:  false
    datePosted: 2000-11-10 11:58:10
    comments: 5
    votes: 8

# BST Posts
- !!models.Post
    category:  !!models.Category
               id: 2
    title:     Basics of Binary Search Trees
    content:   <p>General:<br>
               To best understand a Binary Search Tree, it is important to start from a basic tree and distniguish the constraints that 'Binary' and 'Search' impose on a basic Tree data structure. Firstly, a Tree is a data structure of linked nodes with an initial starting node called the root. Binary Trees have the added constraint of having at most two children for each node. Lastly, the difference between a Binary Tree and a Binary Search Tree is that Binary Search Trees have the added constraint of having ordered nodes. For every parent node, its left child is orded less or before the parent while the right child is ordered greater or after the parent.</p>

               <p>Pros:<br>
               - Better performance than linear structures<br>
               - Memory efficient<br>
               - Utilized for search and sort algorithms</p>

               <p>Implementation:<br>
               A Binary Search Tree can be implemented using a simple node class with two child node pointers and a data field. Also, a Binary Search Tree can be implemented abstractly using simpler data structures such as lists or arrays.</p>

               <p>Common Functions:<br>
               insert(V Value) - Inserts a node with given value<br>
               delete(V Value) - Deletes node with given value<br>
               size() - Returns the size of the Binary Search Tree</p>
    userName:  Fred
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 2
    title:     Helpful videos and links for Binary Search Trees
    content:   <a href="http://algs4.cs.princeton.edu/32bst/BST.java.html">Implementation of Binary Search Tree by Robert Sedgewick and Kevin Wayne</a> with 
               <a href="http://algs4.cs.princeton.edu/code/javadoc/BST.html">Java Documentation</a> and 
               <a href="http://algs4.cs.princeton.edu/32bst/">Notes</a> <br>
               <a href="http://en.wikipedia.org/wiki/Binary_search_tree">Wikipedia Page for Binary Search Tree</a> <br>
               <a href="http://cslibrary.stanford.edu/110/BinaryTrees.html">Notes on Binary Search Tree by Nick Parlante</a> <br>
    userName:  Fred
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 2
    title:     Missed lecture the other day, does anyone have a list of terminologies for BST?
    content:   Unfortunately couldn't make it to class and the slides are not posted online. I really appreciate the help guys!
    userName:  Fred
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
- !!models.Post
    category:  !!models.Category
               id: 2
    title:     How do you search through a Binary Search Tree for a certain value?
    content:   I have no idea how to find a certain value in a Binary Search Tree. Could someone explain how exactly to search through a BST?
    userName:  Drew
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5

# Comparator Posts
- !!models.Post
    category:  !!models.Category
               id: 3
    title:     Basics of Comparators
    content:   "<p>General:<br>
                The Comparator Interface in Java utilizes the method compare() to impose an ordering on the class implementing the Comparator Interface. This is extremely useful for ordering any type of collection such as lists, sets, maps, etc.</p>

                <p>Pros:<br>
                - Can be delcared in a separate class so you can leave the base code unchanged<br>
                - Can declare rules for a non-natural or custom ordering</p>

                <p>Core Methods:<br>
                compare(T obj1, Tobj2) - Compares its two arguments for order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second.</p>

                <p>Example Code:</p>

                <pre><strong>public</strong> <strong>class</strong> PersonAgeComparator <strong>implements</strong> <strong>Comparator</strong>{

				<strong>public</strong> <strong>int</strong> compare(Object o1, Object o2) {
				    person p1 = (Person) o1;
				    Person p2 = (Person) o2; 
				<strong>return</strong> p1.getPersonAge() - p2.getPersonAge();
				  }
				}</pre>"
    userName:  Jason
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 3
    title:     Helpful videos and links for Comparators
    content:   <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html">Java Documentation</a> <br>
               <a href="http://developer.android.com/reference/java/util/Comparator.html">Android Documentation</a> <br>
               <a href="http://www.mkyong.com/java/java-object-sorting-example-comparable-and-comparator/">Blog on Comparable and Comparator</a><br>
               <a href="stackoverflow.com/questions/2839137/how-to-use-comparator-in-java-to-sort">StackOverflow Discussion</a> 
    userName:  Cindy
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 3
    title:     How do you implement a Comparator compare method?
    content:   I am trying to order a list of colors by alphabetical order but I'm unsure how to implement the compare method inside my Comparator. Could I get a hint or some guidance? 
    userName:  Bryce
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5

# DCLL Posts
- !!models.Post
    category:  !!models.Category
               id: 4
    title:     Basics of Double Circular Linked Lists 
    content:   "<p>General:<br>
				A Double Circular Linked List may be a mouthful, but it is not as complex as it sounds. Firstly, a Linked List is just a collection of linked nodes. These nodes contain data and pointers to other nodes. Making a Linked List 'Circular' means that these nodes are linked in a circle. This means that the last node in the list has a pointer to the first node in the list. Taking a Circular Linked List and making it 'Double' or also called 'Doubly' means that all the nodes in the list have two pointers, one pointing to the node prior to itself and one pointing to the node after itself.</p>
				
				<p>Pros:<br>
				- Provides more functionality compared to a simpler linked list<br>
				- More efficient iteration, selection, and deletion</p>
				
				<p>Core Methods:<br>
				offer(E element) - Adds given element at the end of the list<br>
				poll() - Retrieves and removes the head (first element) of this list.<br>
				size() - Returns the number of elements in the list</p>
				
				Example Code:<br>
				<pre>
				public class Node&lt;T&gt; {
				  Node prev;
				  Node next;
				  T data;
				
				  public Node(T data) {
				    this.data = data;
				    prev = null;
				    next = null;
				  }
				}
				
				public class LinkedList&lt;T&gt; {
				  Node&lt;T&gt; head;
				  int size;
				
				  public LinkedList() {
				    head = null;
				    size = 0;
				  }
				
				  public void offer(T newData) {
				    if (head == null) {
				      head = new Node&lt;T&gt;(newData);
				      size++;
				      return;
				    }
				
				    head.prev.next = new Node&lt;T&gt;(newData);
				    head.prev = head.prev.next;
				    size++;
				    return;
				  }
				
				  public void poll() {
				    head.prev = head.next;
				    head.next.prev = head.prev;
				    head = head.next;
				    return;
				  }
				
				  public int size() {
				    return size;
				  }
				}
				</pre>" 
    userName:  Jason
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 4
    title:     Helpful videos and links for Double Circular Linked Lists
    content:   <a href="http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html">Java Documentation for Regular Linked List</a> <br>
               <a href="http://developer.android.com/reference/java/util/LinkedList.html">Android Documentation for Regular Linked List</a> <br>
               <a href="http://en.wikipedia.org/wiki/Doubly_linked_list">Wikipedia Page on DCLL</a> <br>
               <a href="techyrajeev.blogspot.com/2012/03/java-tutorial-on-circular-doubly-linked.html">Blog on DCLL</a> <br> 
    userName:  Cindy
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 4
    title:     What does the node class for a DCLL look like?
    content:   I have a node class for a regular singular linked list but I am having some trouble refactoring it for a DCLL. What should I change in my node class?
    userName:  Aaron
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
- !!models.Post
    category:  !!models.Category
               id: 4
    title:     What are some of the advantages of having a DCLL?
    content:   Implementing a DCLL versus a regular Linked List is a huge pain. I just want to understand what are the benefits of a DCLL and if it is really worth the extra code.
    userName:  Julie
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
# Generics Posts
- !!models.Post
    category:  !!models.Category
               id: 5
    title:     Basics of Generics
    content:   "<h1>Generic Types</h1>
				
				<p>A <em>generic type</em> is a generic class or interface that is parameterized over types. The following <tt>Box</tt> class will be modified to demonstrate the concept.</p>
				
				<h2>A Simple Box Class</h2>
				
				<p>Begin by examining a non-generic <tt>Box</tt> class that operates on objects of any type. It needs only to provide two methods: <tt>set</tt>, which adds an object to the box, and <tt>get</tt>, which retrieves it:</p>
				
				<pre>public class Box {
				    private Object object;
				
				    public void set(Object object) { this.object = object; }
				    public Object get() { return object; }
				}
				</pre>
				
				<p>Since its methods accept or return an <tt>Object</tt>, you are free to pass in whatever you want, provided that it is not one of the primitive types. There is no way to verify, at compile time, how the class is used. One part of the code may place an <tt>Integer</tt> in the box and expect to get <tt>Integer</tt>s out of it, while another part of the code may mistakenly pass in a <tt>String</tt>, resulting in a runtime error.</p>
				
				<h2>A Generic Version of the Box Class</h2>
				
				<p>A <em>generic class</em> is defined with the following format:</p>
				
				<pre>class name&lt;T1, T2, ..., Tn&gt; { /* ... */ }
				</pre>
				
				<p>The type parameter section, delimited by angle brackets (<tt>&lt;&gt;</tt>), follows the class name. It specifies the <em>type parameters</em> (also called <em>type variables</em>) <tt>T1</tt>, <tt>T2</tt>, ..., and <tt>Tn</tt>.</p>
				
				<p>To update the <tt>Box</tt> class to use generics, you create a <em>generic type declaration</em> by changing the code \"<tt>public class Box</tt>\" to \"<tt>public class Box&lt;T&gt;</tt>\". This introduces the type variable, <tt>T</tt>, that can be used anywhere inside the class.</p>
				
				<p>With this change, the <tt>Box</tt> class becomes:</p>
				
				<pre>/**
				 * Generic version of the Box class.
				 * @param &lt;T&gt; the type of the value being boxed
				 */
				public class Box&lt;T&gt; {
				    // T stands for \"Type\"
				    private T t;
				
				    public void set(T t) { this.t = t; }
				    public T get() { return t; }
				}
				</pre>
				
				<p>As you can see, all occurrences of <tt>Object</tt> are replaced by <tt>T</tt>. A type variable can be any <strong>non-primitive</strong> type you specify: any class type, any interface type, any array type, or even another type variable.</p>
				
				<p>This same technique can be applied to create generic interfaces.</p>
				
				<h2>Type Parameter Naming Conventions</h2>
				
				<p>By convention, type parameter names are single, uppercase letters. This stands in sharp contrast to the variable <a href=\"http://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html#naming\" target=\"_top\">naming</a> conventions that you already know about, and with good reason: Without this convention, it would be difficult to tell the difference between a type variable and an ordinary class or interface name.</p>
				
				<p>The most commonly used type parameter names are:</p>
				
				<ul>
				  <li>E - Element (used extensively by the Java Collections Framework)</li>
				  <li>K - Key</li>
				  <li>N - Number</li>
				  <li>T - Type</li>
				  <li>V - Value</li>
				  <li>S,U,V etc. - 2nd, 3rd, 4th types</li>
				</ul>
				
				<p>You'll see these names used throughout the Java SE API and the rest of this lesson.</p>
				
				<h2>Invoking and Instantiating a Generic Type</h2>
				
				<p>To reference the generic <tt>Box</tt> class from within your code, you must perform a <em>generic type invocation</em>, which replaces <tt>T</tt> with some concrete value, such as <tt>Integer</tt>:</p>
				
				<pre>Box&lt;Integer&gt; integerBox;
				</pre>
				
				<p>You can think of a generic type invocation as being similar to an ordinary method invocation, but instead of passing an argument to a method, you are passing a <em>type argument</em> &mdash; <tt>Integer</tt> in this case &mdash; to the <tt>Box</tt> class itself.</p>
				
				<hr>
				<p><strong>Type Parameter and Type Argument Terminology:</strong>&nbsp;Many developers use the terms \"type parameter\" and \"type argument\" interchangeably, but these terms are not the same. When coding, one provides type arguments in order to create a parameterized type. Therefore, the <tt>T</tt> in <tt>Foo&lt;T&gt;</tt> is a type parameter and the <tt>String</tt> in <tt>Foo&lt;String&gt; f</tt> is a type argument. This lesson observes this definition when using these terms.</p>
				
				<hr>
				<p>Like any other variable declaration, this code does not actually create a new <tt>Box</tt> object. It simply declares that <tt>integerBox</tt> will hold a reference to a \"<tt>Box</tt> of <tt>Integer</tt>\", which is how <tt>Box&lt;Integer&gt;</tt> is read.</p>
				
				<p>An invocation of a generic type is generally known as a <em>parameterized type</em>.</p>
				
				<p>To instantiate this class, use the <tt>new</tt> keyword, as usual, but place <tt>&lt;Integer&gt;</tt> between the class name and the parenthesis:</p>
				
				<pre>Box&lt;Integer&gt; integerBox = new Box&lt;Integer&gt;();
				</pre>
				
				<h2>The Diamond</h2>
				
				<p>In Java SE 7 and later, you can replace the type arguments required to invoke the constructor of a generic class with an empty set of type arguments (&lt;&gt;) as long as the compiler can determine, or infer, the type arguments from the context. This pair of angle brackets, &lt;&gt;, is informally called <em>the diamond</em>. For example, you can create an instance of <tt>Box&lt;Integer&gt;</tt> with the following statement:</p>
				
				<pre>Box&lt;Integer&gt; integerBox = new Box&lt;&gt;();
				</pre>
				
				<h2>Multiple Type Parameters</h2>
				
				<p>As mentioned previously, a generic class can have multiple type parameters. For example, the generic <tt>OrderedPair</tt> class, which implements the generic <tt>Pair</tt> interface:</p>
				
				<pre>public interface Pair&lt;K, V&gt; {
				    public K getKey();
				    public V getValue();
				}
				
				public class OrderedPair&lt;K, V&gt; implements Pair&lt;K, V&gt; {
				
				    private K key;
				    private V value;
				
				    public OrderedPair(K key, V value) {
				  this.key = key;
				  this.value = value;
				    }
				
				    public K getKey() { return key; }
				    public V getValue() { return value; }
				}
				</pre>
				
				<p>The following statements create two instantiations of the <tt>OrderedPair</tt> class:</p>
				
				<pre>Pair&lt;String, Integer&gt; p1 = new OrderedPair&lt;String, Integer&gt;(\"Even\", 8);
				Pair&lt;String, String&gt;  p2 = new OrderedPair&lt;String, String&gt;(\"hello\", \"world\");
				</pre>
				
				<p>The code, <tt>new OrderedPair&lt;String, Integer&gt;</tt>, instantiates <tt>K</tt> as a <tt>String</tt> and <tt>V</tt> as an <tt>Integer</tt>. Therefore, the parameter types of <tt>OrderedPair</tt>'s constructor are <tt>String</tt> and <tt>Integer</tt>, respectively. Due to autoboxing, is it valid to pass a <tt>String</tt> and an <tt>int</tt> to the class.</p>
				
				<p>As mentioned in The Diamond, because a Java compiler can infer the <tt>K</tt> and <tt>V</tt> types from the declaration <tt>OrderedPair&lt;String, Integer&gt;</tt>, these statements can be shortened using diamond notation:</p>
				
				<pre>OrderedPair&lt;String, Integer&gt; p1 = new OrderedPair<strong>&lt;&gt;</strong>(\"Even\", 8);
				OrderedPair&lt;String, String&gt;  p2 = new OrderedPair<strong>&lt;&gt;</strong>(\"hello\", \"world\");
				</pre>
				
				<p>To create a generic interface, follow the same conventions as for creating a generic class.</p>
				
				<h2>Parameterized Types</h2>
				
				<p>You can also substitute a type parameter (i.e., <tt>K</tt> or <tt>V</tt>) with a parameterized type (i.e., <tt>List&lt;String&gt;</tt>). For example, using the <tt>OrderedPair&lt;K, V&gt;</tt> example:</p>
				
				<pre>OrderedPair&lt;String, <strong>Box&lt;Integer&gt;</strong>&gt; p = new OrderedPair&lt;&gt;(\"primes\", new Box&lt;Integer&gt;(...));
				</pre>"
    userName:  Jason
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 5
    title:     Helpful videos and links for Generics
    content:   <a href="http://www.angelikalanger.com/GenericsFAQ/FAQSections/ParameterizedTypes.html#FAQ001">FAQS on Java Generics</a> <br>
               <a href="http://en.wikipedia.org/wiki/Generics_in_Java#Type_wildcards">Wikipedia Page on Generics in Java</a> <br>
               <a href="http://www.javacodegeeks.com/2011/04/java-generics-quick-tutorial.html">Tutorial on Generics in Java</a> 
    userName:  Cindy
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 5
    title:     Does anyone know of a good explanation for Generics?
    content:   I've been Googling around for ages and I still can't figure out how Generics work. Does anybody know of a good site or video that really helped them understand this topic? Maybe with examples?
    userName:  Ty
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
- !!models.Post
    category:  !!models.Category
               id: 5
    title:     I don't get what Generics do
    content:   I need some help understanding what the purpose of Generics is. My program seems to work even if I don't use Generics.
    userName:  Kyle
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
- !!models.Post
    category:  !!models.Category
               id: 5
    title:     Can I use Strings to represent Generics?
    content:   For all the examples of Generic Type Parameters, I mainly see T or E. I like to use descriptive parameter names so I was wondering if it is okay to use a String to represent Generic Type Parameters.
    userName:  Jerry
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
# Hashing Posts
- !!models.Post
    category:  !!models.Category
               id: 6
    title:     Basics of Hashing
    content:   "<p>
<h3>Hash Functions</h3>
<ul>
<li>Take a variable amount of data</li>
<li>Run it through a mathematical transformation</li>
<li>Produce a fixed size integer</li>
<li>Mathematical operations are O(1)</li>
</ul>
<h3>Hash Tables</h3>
<ul>
<li>Collection class with O(1) access times</li>
<li>Array + hash function</li>
<li>Elements get stored in array at location of hash</li>
<li>Only works if array is same size of elements (direct hashing)</li>
<li>Or if the set of hashes is smaller than the set of items (can cause collisions)</li>
<li>Allows values to be stored and looked up using a key (key, value)</li>
</ul>
<h5>Perfect Hashing</h5>
<ul>
<li>Each item has a unique hash value</li>
<li>E.g. 52 playing cards and an array of size 52</li>
<li>Does not work well in real life (unknown data, complex data)</li>
<li>E.g. Strings, custom objects, etc</li>
</ul>
<h5>Fixed Sized Arrays</h5>
<ul>
<li>Generally, take the modulo of the result, worry about collisions later</li>
</ul>
<h3>Collisions</h3>
<ul>
<li>Occurs whenever not using direct hashing</li>
<li>Range of keys &gt; array range</li>
<li>Handle with either open addressing or chaining</li>
</ul>
<h4>Open Addressing</h4>
<ul>
<li>If slot indicated by hash function is full, insert into another slot</li>
<li>Works until load factor is 100%</li>
<li>
<strong>Probe sequence</strong> determines where to look for next available slot</li>
<li>Insertions and lookups must use same probe sequence</li>
<li>Removed elements must be recorded</li>
<li>Each slot must record whether it is empty, full, or deleted</li>
<li>A slot can only be empty until the first time a value is inserted, after that it is either full or deleted</li>
</ul>
<h6>Open Addressing: Linear Probing</h6>
<ul>
<li>On collision, repeatedly scan adjacent cells until empty one is found</li>
<li>Wrap around end of array (using modulus)</li>
<li>If many keys hash to same location, may cause long searches</li>
<li>Full? Track size separately or track index </li>
</ul>
<h6>Open Addressing: Quadratic Probing</h6>
<ul>
<li>Add square of probe number (modulo array size) to get next slot</li>
<li>Avoids creating clusters</li>
<li>Tends to spread data out more, reduce collisions</li>
</ul>
<h6>Open Addressing: Double Hashing</h6>
<ul>
<li>Define two hash functions h1 and h2</li>
<li>h1(key) determines intitial slot</li>
<li>h2(key) determines the step size for next probe</li>
<li>h2(key) != 0</li>
<li>Choose two hash functions that are generally much different from each other</li>
</ul>
<h6>Open Addressing: Table Size</h6>
<ul>
<li>Load factor can not exceed 100%</li>
<li>If the table size ever changes, each element must be reinserted into the hash table (taking into account new size)</li>
</ul>
<h3>Chained Hashing</h3>
<ul>
<li>Each array slot refers to linked list of elements</li>
<li>On insertions, hash function gives slot, then item is added to end of list</li>
<li>Lookups must traverse list to find element</li>
<li>Still want to expand table to keep lists short (if list under constant limit, considered O(1)</li>
<li>Still need good hash function to spread of slots</li>
</ul>
<h3>Summary</h3>
<ul>
<li>Avoid collisions as much as possible (good hash function to spread out data)</li>
<li>Manage collisions when they do happen (open addressing, chaining)</li>
<li>Keep load factor down</li>
<li>Next time: Coming up with good hash functions</li>
</ul>
               </p>" 
    userName:  John
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 6
    title:     Helpful videos and links for Hashing

    content:   '<a href="http://www.sparknotes.com/cs/searching/hashtables/section1.html">SparkNotes on Hash Tables</a><br>
<a href="http://stackoverflow.com/questions/730620/how-does-a-hash-table-work">How does a hash table work</a><br>
<a href="https://www.cs.auckland.ac.nz/software/AlgAnim/hash_tables.html">Hash Tables</a><br>' 
    userName:  Becky
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 6
    title:     Hash conventions
    content:   What are some good Hash conventions to use? 
    userName:  Chad
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
- !!models.Post
    category:  !!models.Category
               id: 6
    title:     Typical Hash mappings?
    content:   What kinds of things (elements?) can you Hash together?
    userName:  Charlie
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
# Heaps Posts
- !!models.Post
    category:  !!models.Category
               id: 7
    title:     Basics of Heaps
    content:   "<p>
<h3>Heaps</h3>
<ul>
<li>Tree based data structure which satisfies the heap property</li>
<li>Provides good time complexity</li>
<li>Partially sorted </li>
<li>Not to be confused with where dynamically allocated memory is located</li>
</ul>
<h5>The heap property (invariants)</h5>
<ul>
<li>Complete tree</li>
<li>Parent and children nodes must maintain same relative ordering</li>
</ul>
<h5>Min-Heap</h5>
<ul>
<li>Each child node must be larger than its parent</li>
<li>Conversely, each parent node must be smaller than its child</li>
<li>The root element always contains the minimum most element of the set</li>
</ul>
<h5>Max-Heap</h5>
<ul>
<li>Each child node must be smaller than its parent</li>
<li>Conversely, each parent node must be larger than its child</li>
<li>The root element always contains the maximum most element of the set</li>
</ul>
<h3>Heap Operations</h3>
<h6> findMin/Max </h6>
<ul><li> Simply look at the root node </li></ul>
<h6>insert</h6>
<ul>
<li>Insert new element into next available position (so that the tree remains complete)</li>
<li>To do this, insert node to the right of all nodes at depth d<sub>max</sub>
</li>
<li>Or if there are already 2<sup>d<sub>max</sub></sup> at this level, instead as first node at depth d<sub>max</sub> + 1 making the tree deeper by one level</li>
<li>Heapify (bubble) the element up until the heap property is correct</li>
</ul>
<h6>removal</h6>
<ul>
<li>Largest/smallest value is the root of the heap</li>
<li>Node is deleted and replaced with bottom most, right most node</li>
<li>The remaining tree is complete but may not satisfy heap property</li>
<li>Heapify down until the heap property is restored</li>
</ul>
<h6>heapify</h6>
<ul>
<li>Bubble the current node up or down in order to maintain heap property</li>
<li>In insertions, continually swap with parent node until node is in correct position (possible the entire way to the root)</li>
<li>In removals, continually swap with the child node until node is in correct position (possible the entire way to a leaf)</li>
<li>In min heap, removals should swap with min child</li>
<li>In max heap, removals should swap with max child</li>
</ul>
<h6>size</h6>
<ul>
<li>Size should be kept track of separately </li>
</ul>
<h5>Operation Time Complexity</h5>
<ul>
<li>Time complexity is related to the maximum height of the tree</li>
<li>Since heaps are complete trees we get O(log n)</li>
<li>Complete trees are balanced</li>
</ul><table>
<thead><tr>
<th>findMin/Max</th>
<th>removeMin/Max</th>
<th>insert</th>
<th>heapify</th>
</tr></thead>
<tbody><tr>
<td>O(1)</td>
<td>O(log n)</td>
<td>O(log n)</td>
<td>O(log n)</td>
</tr></tbody>
</table>
               </p>" 
    userName:  Bob
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 7
    title:     Helpful videos and links for Heaps
    content:   '<a href="https://www.princeton.edu/~achaney/tmve/wiki100k/docs/Heap_(data_structure).html">Heap (Data Structure)</a><br>
<a href="http://www.csanimated.com/animation.php?t=Heap_(data_structure)">Video on Heaps via CSAnimated</a><br>
<a href="http://www.cs.cmu.edu/~adamchik/15-121/lectures/Binary%20Heaps/heaps.html">Binary Heaps</a><br>'

    userName:  Chaplin
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 7
    title:     FIFO?
    content:   I'm a little rusty on my Heap knowledge.. is it FIFO or LIFO?
    userName:  David
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
- !!models.Post
    category:  !!models.Category
               id: 7
    title:     Big-O of Heaps
    content:   Does anyone know the Big-O of Heap operations? Thanks!
    userName:  Edgar
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
# Huffman Tree Posts
- !!models.Post
    category:  !!models.Category
               id: 8
    title:     Basics of Huffman Trees
    content:   "<p>
<h3>Huffman Trees</h3>

<ul>
<li>Each node has 0 or 2 children</li>
<li>Only leaf nodes contain data</li>
<li>Data in each leaf node is unique</li>
</ul>
<h3>Huffman Coding</h3>
<h5>Building a Huffman Tree</h5>
<ol>
<li>Create a table of values mapping characters to their frequencies (how often a chracter appears)</li>
<li>Create a priority queue where the key is the frequency and the data is the character (minimum values have higher priority)</li>
<li>Insert all of the values from the table into the priority queue</li>
<li>If the priority queue has a single element, you're done, this is the root of the tree</li>
<li>Poll the priority queue twice and create a binary tree with those nodes</li>
<li>Add the frequencies of the newly created tree and offer back to the priority queue</li>
<li>Return to step 4</li>
</ol>
<ul>
<li>Basic compression</li>
<li>Performs compression on characters (not entire words)</li>
<li>Represent most frequent characters using shortest bit-length</li>
</ul>
<h5>Huffman Coding with Tree</h5>
<ul>
<li>Find the leaf with data for current character</li>
<li>Starting from the root, traverse to the leaf node with data for current character</li>
<li>If you take a left subtree, record a 0 bit</li>
<li>If you take a right subtree, record a 1 bit</li>
</ul>
<h5>Compression: How much space did we save?</h5>
<ul>
<li>Depends on how strings are encoded</li>
<li>If using ASCII, each character can be represented using two hex digits</li>
<li>Each hex digit is represented by a nibble (4 bits)</li>
<li>So two hex digits give us a byte (8 bits)</li>
<li>Therefore, in ASCII, it takes 8 bits to store a single character</li>
<li>However, this does not account for storing the Huffman tree</li>
<li>Larger strings produce better compression</li>
</ul>
<h5>Decoding Huffman Coded Message</h5>
<ul>
<li>Given a Huffman tree, it's easy to decode a message</li>
<li>Starting at the root node, go left on a 0 bit and right on a 1 bit</li>
<li>If you hit a leaf node, record the data and start back over at the root for the next bit</li>
</ul>
               </p>" 
    userName:  Frank
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 8
    title:     Helpful videos and links for Huffman Trees
    content:   '<a href="http://www.princeton.edu/~achaney/tmve/wiki100k/docs/Huffman_coding.html">Huffman Coding</a><br>
<a href="https://www.cs.usfca.edu/~brooks/S04classes/cs245/lectures/lecture10.pdf">Data Structures and Algorithms, Huffman Trees</a><br>
<a href="http://en.wikipedia.org/wiki/Huffman_coding">Wikipedia on Huffman Coding</a><br>'
    userName:  George
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 8
    title:     Hawaiian language
    content:   My friend told me that since the Hawaiian language has a lot of vowels, it would be good to use a Huffman tree for encoding on.  Is there an example anyone has?
    userName:  Human
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
- !!models.Post
    category:  !!models.Category
               id: 8
    title:     Encoding
    content:   I have a little difficulty trying to understand the binary numbers that we write to a file to show what was compressed.  How do we first figure out how many bytes or bits the file has compressed?
    userName:  India
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
# Iterator Posts
- !!models.Post
    category:  !!models.Category
               id: 9
    title:     Basics of Iterators
    content:   "<p>
<ul>
<li>Iterators provide an abstract way of looping over an entire collection of items</li>
<li>Basically an object that moves along a list (or other collection)</li>
<li>Since collections of items differ in implementation, the details are left up to the implementing class</li>
<li>The for-each loop can be used with any collection that implements the Iterable interface</li>
</ul>
<pre><code>
List&lt;String&gt; list = new List&lt;String&gt;();
add some values
for (int i=0-;i&lt;list.size(); i++) {
   System.out.println(luist.get(i)));
}
</code></pre>
<h3> Iterator Interface</h3>
<ul><li>An Object is an Iterator if it implements the Iterator Interface</li></ul>
<pre><code>
public boolean hasNext();
public E next();
public void remove();
</code></pre>
<ul>
<li>hasNext() returns true while there are still more items in the collection</li>
<li>next() returns the next element in the iteration</li>
<li>remove() removes the last element returned by next. Can only be called once per next() call</li>
</ul>
<h3>Iterable Interface</h3>
<ul>
<li>Any class that we wish to provide an Iterator for needs to implement the Iterable Interface</li>
<li>Iterable interface simply specifies that a class can return an Iterator</li>
</ul>
<pre><code> public Iterator&lt;T&gt; iterator(); </code></pre>
<ul><li>iterator() returns an Iterator over a set of elements of type T.</li>
</ul>
<h3>List Iterators</h3>
<ul>
<li>Since lists are so important, Java provides a specialized Iterator for lists</li>
<li>ListIterator simply extends Iterator and adds additional functionality</li>

<ul>
<li>public void add(E e);   Inserts the specified element into the list (optional)</li>
<li>public boolean hasNext();  Returns true if this list iterator has more elements when traversion the list in the forward direction.</li>
<li>public boolean hasPrevious();  Returns true if this list iterator has mor eleements when traversion the list in the reverse direction.</li>
<li>public E next();  Returns the next element in the list and advances the cursor position.</li>
<li>public int nextIndex();  Returns the index of the lemenet that would be returned by a subsequent call to next().</li>
<li>public E previous();  Returns the previous element in the list and moves the cursor position backwards.</li>
<li>public int previousIndex();  Returns the index of the element that would be returned by a subsequent call to previous();</li>
<li>public void remove();  Return the index of the element that would be returned by a subsequent call to previous().</li>
<li>public void set(E e);  Replaces the last element returned by next() or previous() with the specified element (optional).</li>
</ui>
</ul>
<h3>For-each Loops</h3>
<ul>
<li>Can use for-each style loops over any collection of data that implements the Iterable interface</li>
<li>This includes the entire Collections API!</li>
<li>Can not access index</li>
<li>Makes code more readable</li>
</ul>
               </p>"
    userName:  Julie
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 9
    title:     Helpful videos and links for Iterators
    content:   '<a href="http://www.cs.duke.edu/csed/ap/subset/doc/ap/java/util/Iterator.html">Interface Iterator</a><br>
<a href="http://en.wikibooks.org/wiki/Computer_Science_Design_Patterns/Iterator">Wikibooks on Iterators</a><br>
<a href="http://ics211s14.wordpress.com/list-iterators/">List Iterators</a><br>
<a href="http://www.wisegeek.com/what-is-an-iterator.htm">What is an iterator</a><br>'
    userName:  Kilo
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 9
    title:     Last week's assignment.
    content:   Now that the assignment is over, did anyone else have a lot of trouble trying to wrap their head around Iterators?
    userName:  Lima
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
# JUnit Posts 
- !!models.Post
    category:  !!models.Category
               id: 10
    title:     Basics of JUnit
    content:   "<p>
<h3>JUnit</h3>
<ul>
<li>JUnit is the defacto testing framework for Java applications</li>
<li>Provides unit testing (and to some extent integration testing)</li>
<li>Comes standard with Eclipse/Netbeans</li>
<li>Heavily used in industry </li>
</ul>
<h3>Obtaining JUnit</h3>
<ul>
<li>Recent versions of Eclipse and Netbeans should include JUnit by default</li>
<li>Otherwise, it can be downloaded at http://junit.org/</li>
<li>You will need to download the junit jar and the hamcrest jar as described at https://github.com/junit-team/junit/wiki/Download-and-Install</li>
</ul>    
<h3>Creating test cases</h3>
<ul>
<li>Each test method should be a void method annotated with the @Test annotation</li>
<li>Each test should be specific and include only a few number of assertions (a single assertion is best, but not always possible)</li>
<li>@Test(expected = ExceptionName.class) can test is an exception is expected to occur</li>
<li>It's posibble to create a setup method that is called before each test using the @Before annotation</li>
<li>JUnit tests should be documented</li>
</ul>
<h3>Using JUnit from the command line (assuming no packages)</h3>
<ul>
<li>It's much easier to use JUnit from an IDE</li>
<li>Store the junit and hamcrest jar files in a known location on your computer (e.g. /home/anthony/dev/211/lib)</li>
<li>Copy your test class to the same directory as your source</li>
<li>Navigate your terminal window to the source root of your project</li>
<li>Compile your test case (should compile your entire project)</li>
<li>Compile anything that wasn't compiled from test case</li>
<li>Run the JUnit test</li>
<li>Note: that : are used when separating class paths in Linux/OS X, but I believe ; are used in Windows.</li>
</ul><p>Compile the source files</p>

<pre><code>javac -classpath [class paths] [source file(s)]

javac -classpath .:/home/anthony/dev/211/lib/junit-4.11.jar:/home/anthony/dev/211/lib/hamcrest-core-1.3.jar /home/anthony/dev/211/src/a02/Assignment2Tests.java
</code></pre>

<p>Running the tests</p>

<pre><code>java -classpath [classpaths] org.junit.runner.JUnitCore [Test Class]

java -classpath .:/home/anthony/dev/211/lib/junit-4.11.jar:/home/anthony/dev/211/lib/hamcrest-core-1.3.jar org.junit.runner.JUnitCore Assignment02Tests
</code></pre> 

               <p>"
    userName:  Jason
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 10
    title:     Helpful videos and links for JUnit
    content:  <a href="https://github.com/junit-team/junit/wiki/Getting-started">Getting Started Guide</a><br>
              <a href="https://github.com/junit-team/junit/wiki">JUnit Wiki</a><br>
              In Eclipse, right click on source directory and select "Add New JUnit Test case" (should be similar in Netbeans)<br>
              <a href="https://github.com/junit-team/junit/wiki/Assertions">Assertions</a><br>
              <a href="http://junit.sourceforge.net/javadoc/">Assertions API</a><br>
              <a href="http://courses.cs.washington.edu/courses/cse143/11wi/eclipse-tutorial/junit.shtml">http://courses.cs.washington.edu/courses/cse143/11wi/eclipse-tutorial/junit.shtml</a><br>
   
     
    userName:  Cindy
    isSticky:  true
      
- !!models.Post
    category:  !!models.Category
               id: 10
    title:     How can I perform JUnit Tests using Eclipse?
    content:   I am having some trouble setting up JUnit inside of Eclipse. Could someone please help me?
    userName:  Howard
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
# Linked List Posts
- !!models.Post
    category:  !!models.Category
               id: 11
    title:     Basics of Linked Lists
    content:   "<p>
<h3>Implementing Lists with Nodes</h3>

<ul>
<li>Need to keep track of head of list</li>
<li>Need to keep track of size of list</li>
<li>The list is built with with nodes pointing to each other</li>
<li>In an empty list, head points to null and size = 0</li>
<pre><code>
public class List&lt;E&gt {
   private Node&lt;E&gt head;
   private int size;
   
   public List() {
      this.head=null;
      this.size=0;
   }
}
</code></pre>
<h6>Adding to an empty list</h6>
<ul>
<li>Update head to new node</li>
<li>make sure new node points to null</li>
</ul>
<h6>Adding to the front of a list</h6>
<ul>
<li>Change head to point to new node</li>
<li>Update new node to point to what head used to point to</li>
</ul>
<h6>Adding to the end of a list</h6>
<ul>
<li>Iterate through list until you read end (node points to null)</li>
<li>Make end node point to new node</li>
<li>Make new node point to null</li>
</ul>
<h6>Adding somewhere in between</h6>
<ul>
<li>Find node/index that comes before new node</li>
<li>Set before node's point to new node</li>
<li>Set new node's pointer to before node's next point</li>
</ul>
<pre><code>
public void add(int index, E item) {
   if (index == 0) {
      this.head = new Node&lt;E&gt(iten, this.head);
      this.size++;
   } else {
      Node&lt;E&gt before = this.getNode(index-1);
      Node&lt;E&gt toAdd = newNode&lt;E&gt(item, before.getNext());
      before.setNext(toAdd);
      this.size++;
   }
}
</code></pre>
<h4>Getting From a List</h4>
<h6>Returning the node at a particular index</h6>
<pre><code>
private Node&lt;E&gt getNode(int index) {
   if (index &lt; 0 || index &gt;= this.size) {
      throw new IndexOutOfBoundsException(\"index: \" + index + \"; size: \" + this.size);
   }
   
   Node&lt;E&gt curr = this.head;
   for (int i=0; i &lt; index; i++) {
      curr = curr.getNext();
   }
   return curr;
}
</code></pre>
What if we just wanted to return the data?
<pre><code>
public E get(int index) { return this.getNode(index).getData(); }
</code></pre>
<h3>Removing from Linked List</h3>
<h6>Removing from front</h6>
<ul>
<li>Change head to point to \"node to be removed\" next</li>
</ul>
<h6>Removing from end of list</h6>
<ul>
<li>Determine next to last node in list</li>
<li>Set next to last node's point to null</li>
</ul>
<h6>Removing Within List</h6>
<ul>
<li>Find node previous to node to be removed</li>
<li>Set previous node's next to node to be removed next</li>
</ul>
               </p>" 
    userName:  November
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 11
    title:     Helpful videos and links for Linked Lists
    content:   '<a href="http://en.wikipedia.org/wiki/List_(abstract_data_type)">Wikipedia on Linked Lists</a><br>
<a href="http://cslibrary.stanford.edu/103/">Linked List Basics</a><br>
<a href="http://nptel.ac.in/courses/106102064/3">NPTEL on Linked Lists and Queues (video)</a><br>'
    userName:  Oscar
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 11
    title:     Insertion into a LL
    content:   How many pointers should we need in order to insert an element into a LL?
    userName:  Papa
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
  
# Nodes Posts
- !!models.Post
    category:  !!models.Category
               id: 12
    title:     Basics of Nodes
    content:   "<p>
<ul>
<li>Nodes are Objects that store data and point to other nodes</li>
<li>Nodes contain a single datum or multiple pieces of data</li>
<li>Many data structures are implemented using nodes</li>

<h4>Generic Nodes Class</h4>
<p>
public class Node&lt;E&gt;<br>
   private E data;<br>
   private Node&lt;E&gt next;<br>
   <br>
   public Node(E data, Node&lt;E&gt next) {<br>
        this.data=data;<br>
        this.next=next;<br>
   }<br>
   public Node(E data) {<br>
        this(data, null);<br>
   }<br>
   public E getData() { return data; }<br>
   public void setData(E data) { this.data = data; }<br>
   <br>
   public Node&lt;E&gt getNext() { return next; }<br>
   public void setNext(Node&lt;E&gt next) { this.next=next; }<br>
</p>
</ul>               
               </p>" 
    userName:  Alex
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 12
    title:     Helpful videos and links for Nodes
    content:   <a href="http://en.wikipedia.org/wiki/Node_(computer_science)">Wikipedia on Nodes</a><br> 
    userName:  Qunynh
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 12
    title:     Advantage of using Nodes 
    content:   Why is it better than using an Array for example? Just seems like a lot more hassle trying to set Nodes up.
    userName:  Robert
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
- !!models.Post
    category:  !!models.Category
               id: 12
    title:     Big-O of nodez
    content:   What are the Big-O costs of using node operations???
    userName:  Ryan
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
# Priority Queues Posts
- !!models.Post
    category:  !!models.Category
               id: 13
    title:     Basics of Priority Queues
    content:   "<p>
Queues</h3>

<ul>
<li>So far, we've only looked at strict FIFO (objects returned in order or insertion)</li>
<li>Doesn't model real world too well</li>
<li>Airport check-in (first class, gold card members, frequent flyers)</li>
<li>Emergency room at hospital</li>
</ul>
<h3>Priority Queues</h3>
<ul>
<li>Give preference to higher priority</li>
<li>Value with current highest priority is always removed first</li>
<li>Same methods as Queue: offer, poll, peek, size</li>
</ul>
<h5>Try It Out</h5>
<ul>
<li>Assume you have an already functioning max-heap called maxHeap</li>
<li>maxHeap contains the following methods (insert, removeMax, size)</li>
<li>Create a PriorityQueue class which used a max heap</li>
</ul>
<h5>Linked List</h5>
<ul>
<li>Insert items into correct place in list (O(n))</li>
<li>Remove items from front of list (O(1))</li>
<li>Insertion of high priority items is fast (inserted closer to front, better real time performance, doesn't change big-o however)</li>
</ul>
<h5>Arrays</h5>
<ul>
<li>Objects inserted at proper location in array</li>
<li>All other objects must be shifted to make room (O(n))</li>
<li>Objects can be removed from the front and the entire array shifted down (O(n))</li>
<li>A circular array can be used for polling (O(1))</li>
</ul>
<h5>Binary Search Tree</h5>
<ul>
<li>Items are inserted into tree using priority as key (O(n))</li>
<li>Items are removed from leftmost or rightmost node of tree (O(n))</li>
<li>Balanced trees would provide better performance</li>
</ul>
<h5>Heap</h5>
<ul>
<li>Objects are inserted into heap using priority as key (O(log n))</li>
<li>Items are removed from heap in O(log n) time</li>
<li>Peeking is constant time</li>
<li>Simplest algorithm with guaranteed log time operations</li>
</ul>   
               </p>" 
    userName:  Nathan
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 13
    title:     Helpful videos and links for Priority Queues
    content:   '<a href="http://pages.cs.wisc.edu/~vernon/cs367/notes/11.PRIORITY-Q.html">Priority Queues</a><br>
<a href="http://www.cs.jhu.edu/~cohen/CS226/Lectures/PriorityQueue.pdf">John Hopkins Dept of Computer Science on Queues (PDF)</a><br>
<a href="http://nptel.ac.in/courses/106102064/3">NPTEL on Linked Lists and Queues (video)</a><br>'
    userName:  Taylor
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 13
    title:     FIFO?
    content:   I know what a Queue is.. But does it work the same as a PQ? Anyone?
    userName:  Amy
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5

# Queues Posts
- !!models.Post
    category:  !!models.Category
               id: 14
    title:     Basics of Queues
    content:   "<p>
<h3>Description</h3>

<ul>
<li>FIFO</li>
<li>Perfect line</li>
<li>Useful in many data management situations </li>
</ul><h3>
<h3>Queue ADT</h3>

<ul>
<li>offer(E e) - Adds an item to the end queue</li>
<li>E peek() - Returns, but does not remove an item from the front of the queue</li>
<li>E poll() - Returns and removes an item from the front of the queue</li>
</ul>
<h3>Array Implementation</h3>

<ul>
<li>Keep track of two pointers, front and rear</li>
<li>Set initial front to 0</li>
<li>Set initial rear to array.length - 1</li>
<li>On offer, increment rear (mod length), insert at array[rear]</li>
<li>On poll, return array[front], and increment front</li>
<li>On peek, return array[front]</li>
<li>Allow both front and rear to wrap around array (use modulus) </li>
<li>Size should be updated on each offer, poll</li>
<li>If size is going to be &gt; array.length, reallocate()</li>
<li>Peek and poll return null on empty queues (no exceptions)</li>
</ul>
<h3>List Implementation</h3>

<ul>
<li>Use double linked list (pointers to head and tail (front and rear))</li>
<li>Empty queue should have head and tail pointing to null</li>
<li>A queue with a single item will have head and tail pointing to that item</li>
<li>On offer, add new item at end of list</li>
<li>On poll, return data at head of list, update head =&gt; head.next</li>
<li>On peek, return data at head of list</li>
<li>Keep track of size on offers and polls</li>
<li>Peek and poll should return null on empty queue</li>
</ul>

               </p>" 
    userName:  Isabella
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 14
    title:     Helpful videos and links for Queues
    content:   '<a href="http://en.wikipedia.org/wiki/Queue_(abstract_data_type)">Wikipedia on Queues</a><br>
<a href="http://en.wikipedia.org/wiki/FIFO">Wikipedia on FIFO</a><br>
<a href="http://www.princeton.edu/~achaney/tmve/wiki100k/docs/Queue_(data_structure).html">Queue (Data structure)</a><br>
<a href="http://interactivepython.org/runestone/static/pythonds/BasicDS/queues.html">Interactive Python on Queues</a><br>'
    userName:  Micheal
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 14
    title:     Any way to go out of order?
    content:   I know that a(n)? Queue is FIFO, but is there anyway to grab an element that is, for exmaple, in the middle?
    userName:  Nicholas
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
# Recursion Posts
- !!models.Post
    category:  !!models.Category
               id: 15
    title:     Basics of Recursion
    content:   "<p>
<h5>In order to understand recursion, one must first understand recursion.<>
<h5>Concept</h5>
<ul>
<li>Conceptually: Compute a solution to a problem by first computing solutions to smaller instances of the same problem (using the same technique)</li>
<li>Practically: A method that calls itself (usually directly)</li>
<li>Divide and Conquer </li>
<li>Recursion works by modifying a set of data until a certain base condition(s) is met</li>
<li>Recursive calls are placed on the runtime stack so that the results of each call are stored in the order they're called</li>
<li>Use base cases to avoid infinite recursion</li>
<li>The recursive step in general moves towards the base case</li>
</ul>   
<h4>Recurrance Relations</h4>
<h6>Fibonacci numbers</h6>
<p>F<sub>n</sub> = F<sub>n - 1</sub> + F<sub>n - 2</sub><br>
which leads us to<br>
F<sub>2</sub> = F<sub>1</sub>  + F<sub>0</sub><br>
F<sub>3</sub> = F<sub>2</sub>  + F<sub>1</sub><br>
F<sub>4</sub> = F<sub>3</sub>  + F<sub>2</sub><br>
etc</p>

<h3>Examples in Computer Science</h3>
<h5>Handing Out Papers - Iterative</h5>
<pre><code>handOutPapers(pile):
  student = first student in line
  while pile is not empty:
    paper = pile.pop() 
    give paper to student
    student = next student in line
</code></pre>
<h5>Handing Out Papers - Recursive-A</h5>
<pre><code>handOutPapers(pile):
  if pile is not empty:
    paper = pile.pop()
    keep paper
    next = next student in line
    next.handOutPapers(pile)
</code></pre>

<ul>
<li>Pile gets smaller each time (due to pop())</li>
<li>Each student follows the same algorithm</li>
<li>Algorithm stops when pile is empty?</li>
</ul>
<h5>Handing Out Papers - Recursive-B</h5>
<pre><code>handOutPapers(pile):
  paper = pile.removeTop()
  keep paper
  if pile is not empty:
    next = next student in line
    next.handOutPapers(pile)
</code></pre>

<ul>
<li>More descriptive of real life</li>
<li>But what happens when a student is handed an empty pile?</li>
</ul>
<h5>Handing Out Papers - Recursive-C</h5>
<pre><code>handOutPapers(pile):
  if pile is not empty:
    paper = pile.removeTop()
    keep paper
    if pile is still not empty:
      next = next student in line
      next.handOutPapers(pile)
</code></pre>

<ul>
<li>Original was simpler</li>
<li>Often simpler to code if stop on empty or 0</li>
</ul>
<h3>Lessons Learned</h3>
<ul>
<li>Recursion -&gt; method calls itself</li>
<li>Need to break problem down into smaller problems</li>
<li>Each call creates a copy of that data on the runtime stack</li>
<li>Need one or more base cases</li>
<li>Can also do some work on the way back from recursive calls</li>
</ul>
               </p>"
    userName:  Jason
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 15
    title:     Helpful videos and links for Recursion
    content:   '<a href=#>Recursion</a><br>
<a href="http://introcs.cs.princeton.edu/java/23recursion/">Recursion - Introduction to Programming in Java</a><br>
<a href="http://www.cprogramming.com/tutorial/lesson16.html">Recursion in C and C++</a><br>'
    userName:  Cindy
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 15
    title:     How does recursion work in a Binary Search Tree?
    content:   I think I understand the basics of Recursion, but I'm not quite sure how to trace through a recursive method in a Binary Search Tree.  Anyone else have the same problem?
    userName:  Bob
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
- !!models.Post
    category:  !!models.Category
               id: 15
    title:     Helpful links on Recursion on YouTube.
    content:   "I just replied to Paul's post regarding how recursion works in a Binary Search Tree.  I linked him to a helpful video I found on YouTube, and was wondering if it were possible to also 
                  put this up on the Helpful Links Sticky? Thanks in advance! Almost forgot, here's the link: <br>
                  <a href = 'https://www.youtube.com/watch?v=ql2oLhDObwA'>Binary Search Tree Recursion</a>"
    userName:  Lucy
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
# Backtracking Posts
- !!models.Post
    category:  !!models.Category
               id: 16
    title:     Basics of Recursive Backtracking
    content:   "<p>
    
<h3>A Problem to Solve</h3>

<ul>
<li>Find all combinations of 3 integers between 1 and 4 that sum to 5.</li>
</ul>
<h5>Brute Force Approach</h5>

<ul>
<li>Enumerate all possible combinations</li>
</ul><pre><code>111 112 113 114   121 122 123 124   131 132 133 134   141 142 143 144
211 212 213 214   221 222 223 224   231 232 233 234   241 242 243 244
311 312 313 314   321 322 323 324   331 332 333 334   341 342 343 344
411 412 413 414   421 422 423 424   431 432 433 434   441 442 443 444
</code></pre>

<ul>
<li>Problem size: # digits raised to combination length</li>
<li>4 possible digits</li>
<li>Combination length of 3</li>
<li>Problem size = 4<sup>3</sup> = 64</li>
<li>Could generate each combination by using three loops</li>
</ul><pre><code>for i = 1 to 4:
  for j = 1 to 4:
    for k = 1 to 4:
      if sum(i, j, k) == 5:
        Found a combination
      else:
        Did not find a combination
</code></pre>
    
<ul>
<li>There is room for optimization, could stop if the first two values sum to 5. </li>
<li>Provides for better real world performance, but doesn't change Big-O.</li>
<li>Need a better approach</li>
</ul>
<h5>Backtracking Approach</h5>

<ul>
<li>Use recursion to explore possible solutions</li>
<li>Backtrack when recursion hits a dead end</li>
</ul>
<p>In general:</p>
<p>1) Is where I am a solution?<br>
2) No? Where can I go from here?<br>
3) Go to valid next location.<br>
4) Was that a solution? If so return true.<br>
5) If there are remaining places to go, go to step 3.<br>
6) Out of places to go, return false.  </p>

<pre><code>find(int[] array, int i):
  if i == array.length:
    return
  sum = sum of array elements up to index i (exclusive)
  for guess from 1 to 4:
    array[i] = guess
    if i == array.length - 1 &amp;&amp; sum + guess == 5:
      print array             //found one
      return                  //no more to be found at this i
    else if guess + sum &gt;= 5:
      return                  //dead end
    else:
      find(array, i + 1)      //recurse
  return
</code></pre>

<p>Let's trace through the algorithm</p>

<pre><code>Trace:
find(array=[?,?,?], i=0)
.sum = 0
.guess = 1: 
..find(array=[1,?,?], i=1)
...sum = 1
...guess = 1
....find(array=[1,1,?], i=2)
.....sum=2
.....guess=1
......find(array=[1,1,1], i=3) - return
.....guess=2
......find(array=[1,1,2], i=3) - return
.....guess=3
......find(array=[1,1,3], i=3) 
......print: [1,1,3]
......return
...guess=2
....find(array=[1,2,?], i=2)
.....sum=3
.....guess=1
......find(array=[1,2,1], i=3) - return
.....guess=2
......find(array=[1,2,2], i=3) - return
......print: [1,2,2]
......return
...guess=3
....(and so on...)
</code></pre>

<h3>Backtracking</h3>
<ul>
<li>Can think of solutions as forming a tree</li>
<li>Each path from root to leaf is a complete solution</li>
<li>Each step along that path is part of the solution (usually use a loop to iterate of each possible next step from the current one)</li>
<li>If the path doesn't work out, we can about early (prunes the tree/search space)</li>
<li>Even if that path is successful, we backtrack and explore other paths (if we want all solutions)</li>
<li>For some problems stop at first solution, in other, find all solutions.</li>
</ul>
<h5>Rewriting the above example to be more versatile</h5>
<ul>
<li>Solve for any size combination (array.length), and range of numbers (start, end), and any total</li>
</ul><pre><code>find(int start, int end, int total, int[] array, int i):
  if i == array.length:
    return
  sum = sum of array elements up to index i (exclusive)
  for guess from start to end:
    array[i] = guess
    if i == array.length - 1 &amp;&amp; sum + guess == total:
      print array
      return
    else if guess + sum &gt;= total:
      return
    else:
      find(start, end, total, array, i + 1)
  return
</code></pre>
<h5>Finding a list of soultions</h5>
<pre><code>find(int start, int end, int total, int[] array, int i):
  list = new empty list
  if i == array.length:
    return list  //still empty
  sum = sum of array elements up to index i (exclusive)
  for guess from start to end:
    array[i] = guess
    if i == array.length - 1 &amp;&amp; sum + guess == total:
      list.add(copy of array)
      return
    else if guess + sum &gt;= total:
      return list  //might be empty
    else:
      sublist = find(start, end, total, array, i + 1)  //recurse
      list.addAll(sublist)
  return list //might be empty
</code></pre>
               </p>" 
    userName:  Jason
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 16
    title:     Helpful videos and links for Recursive Backtracking
    content:   '<a href="https://www.cs.utexas.edu/~scottm/cs307/handouts/recursiveBacktrackingExplanation.htm">Recursive Backtracking Explanation</a><br>
<a href="http://www.cis.upenn.edu/~matuszek/cit594-2012/Pages/backtracking.html">Backtracking</a><br>
<a href="http://compsci.ca/v3/viewtopic.php?t=21497">Backtracking with Recursion</a><br>'
    userName:  Cindy
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 16
    title:     Examples of Recursive Backtracking?
    content:   I think I understand the basics of Recursion, but Recursive Backtracking is another thing in of itself.  Are there any examples anyone found that can help me grasp this topic?
    userName:  Amy
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
# Sorting Posts
- !!models.Post
    category:  !!models.Category
               id: 17
    title:     Basics of Sorting
    content:   "
    <p>Sorting Algorithms
       <ul>
       <li>Selection sort</li>
            <h4>Selection sort Algorithm</h4>
            <ul>
            <li>for fill = 0 to n - 2 do</li>
                 <ul>
                 <li>initialize posMin to fill</li>
                 <li>for next = fill+1 to n-1 do</li>
                     <ul>
                     <li>if the item at next is less than the item at posMin</li>
                     <li>reset posMin to next</li>
                     </ul>
                 <li>Exchange the item at posMin with the one at fill</li>
                 </ul>
            </ul>
       <li>Bubble Sort</li>
            <h4>Bubble Sort Algorithm</h4>
            <ul>
            <li>do</li>
            <li>for each pair of adjacent array elements</li>
            <li>if the values in a pair are out of order</li>
            <li>exchange the values</li>
            <li>while the array is not sorted</li>
            </ul>
       <li>Insertion Sort</li>
            <ul>
            <li>for each array element from the second (nextPos = 1) to the last</li>
            <li>Insert the element at nextPos where it belonds in the array,</li>
            <li>increasing the length of the sorted subarray be one element</li>
            </ul>
       <li>Shell Sort</li>
            <ul>
            <li>Set the initial value of gap to n/2</li>
            <li>while gap > 0</li>
                 <ul>
                 <li>for each array element from position gap to the last element</li>
                      <ul>
                      <li>Insert this element to where it belongs in its subarray</li>
                      </ul>
                 </ul>
                 <li>if gap is 2, set it it 1</li>
                 <li>else gap = gap / 2.2</li>
            </ul>
       <li>Merge Sort</li>
            <ul>
            <li>Merge two sorted arrays</li>
            <li>Merge sort Algorithm</li>
                 <ul>
                 <li>if the tableSize is > 1</li>
                      <ul>
                      <li>Set helfSize to tableSize divided by 2</li>
                      <li>Allocate a table called leftTable of size halfSize</li>
                      <li>Allocate a table called rightTable of size halfSize</li>
                      <li>Copy the elements from table[0 ... helfSize-1] into leftTable</li>
                      <li>Copy the elements from table [halfSize ... tableSize] into rightTable.</li>
                      <li>Recursively apply the merge sort algorithm to leftTable.</li>
                      <li>Recursively apply the merge sort algorithm to rightTable.</li>
                      <li>Apply the merge method using leftTable and rightTable as the input and the original table as the output.</li>
                      </ul>
                 </ul>
            </ul>
       <li>Heapsort</li>
            <ul>
            <li>Uses a heap to store the array</li>
            <li>Heap sort algorithm</li>
                <ul>
                <li>Insert each value from the array to be sorted into a priority queue</li>
                <li>set i to 0</li>
                <li>while the pripoity queue is not empty</li>
                     <ul>
                     <li>remove an item from the queue and insert it back into the array at position i</li>
                     <li>increment i</li>
                </ul>
            </ul>
       
       <li>Quick Sort</li>
            <ul>
                 <li>Indexes first and last are the end points of the array being sorted</li>
                 <li>The index of the picot after partitioning is pivIndex</li>
                 <h4>Algorithm for Quick Sort</h4>
                  <ul>
                      <li>if first < last then</li>
                      <li>choose a pivot(pivIndex) in the subarray and partition the aubarray</li>
                      <li>Recursively apply quicksort to the subarray first . . . pivIndex-1</li>
                      <li>Recursively apply quicksort to the subarray pivIndex+1 . . . last</li>
                  </ul>
            </ul>
       </ul>
    </p>
    
    
    " 
    userName:  Jason
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 17
    title:     Helpful videos and links for Sorting
    content:   '<a href="http://www.sorting-algorithms.com">Sorting Algorithms</a><br>
<a href="http://bigocheatsheet.com">Big-O Cheat Sheet</a><br>
<a href="http://www.cprogramming.com/tutorial/computersciencetheory/sortcomp.html">Sorting Algorithms Comparison</a><br>
<a href="http://betterexplained.com/articles/sorting-algorithms/">Sorting Algorithms | Better Explained</a><br>'

    userName:  Cindy
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 17
    title:     How many types of Sorting should we be familiar with?
    content:   I did a general search of Sorting and there are TONS of results.  How many and which do you recommend we be familiar with for this course?
    userName:  Frank
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
- !!models.Post
    category:  !!models.Category
               id: 17
    title:     Helpful links on different Sorting methods on YouTube.
    content:   Hey guys! Exciting news! I found a few videos demonstrating some of the sorting methods we'll be discussing in class.  I know its a little cheesy but its so awesome and fun.  Hope it helps
                  you as much as it helped me! <br><br>
                  <a href = "https://www.youtube.com/watch?v=ywWBy6J5gz8">QuickSort</a> <br>
                  <a href = "https://www.youtube.com/watch?v=XaqR3G_NVoo">MergeSort</a> <br>
                  <a href = "https://www.youtube.com/watch?v=CmPA7zE8mx0">ShellSort</a> <br>
                  <a href = "https://www.youtube.com/watch?v=Ns4TPTC8whw">SelectSort</a> <br>
                  <a href = "https://www.youtube.com/watch?v=lyZQPjUT5B4">Bubblesort</a> <br>
                  <a href = "https://www.youtube.com/watch?v=ROalU379l3U">InsertSort</a> <br>
    userName:  Carl
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
# Stack Posts
- !!models.Post
    category:  !!models.Category
               id: 18
    title:     Basics of Stacks
    content:   "<p>  
    
    <h4>Stacks</h4>
    <ul>
       <li>Provides encapsulation</li>
       <li>Internal details are protected from external misuse</li>
       <li>Last-in, First-out (LIFO)</li>
       <li>Add to, remove from, and peek at the top only</li>
       <li>Required: push(item), pop, peek</li>
       <li>Java's Stack: (size, empty, search)</li>
       <li>EmptyStackException (peek, pop)</li>
    </ul>
    
    <h4> Why are stacks useful?</h4>
    <ul>
       <li>Computer Programs - Bottom of stack fixed spot in memory, stack pointer stored in register</li>
       <li>Call stack - Keep track of which methods are called, and lacations to return</li>
       <li>Stack oriented programming language (JVM)</li>
       <li>Many CPUs have special registers for stack pointers to conserve opcode space</li>
       <li>Converting decimal to binary</li>
       <li>Towers of Hanoi</li>
       <li>Expression evaluation and syntax parsing (context-free languages)</li>
       <li>Evaulation of an infix/prefix/postfix expressions</li>
       <li>Conversion between different expression types</li>
       <li>Backtracking</li>
       <li>Tree Traversals</li>
    </ul>
    
    
    </p>"
    userName:  Jason
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 18
    title:     Helpful videos and links for Stacks
    content:   '<a href="http://en.wikipedia.org/wiki/Stack_(abstract_data_type)">Wikipedia on Stacks</a><br>
<a href="http://www.cprogramming.com/tutorial/computersciencetheory/stack.html">The Stack Data Structure in C and C++</a><br>
<a href="http://www.cs.umd.edu/class/sum2003/cmsc311/Notes/Mips/stack.html">Understanding the Stack</a><br>'
    userName:  Cindy
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 18
    title:     Why are Stacks useful?
    content:   Why use Stacks when we have other ADTs at our disposal like ArrayLists and such?
    userName:  Will
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
- !!models.Post
    category:  !!models.Category
               id: 18
    title:     Big-O of Stack operations?
    content:   With the quiz coming up, I was wondering if anyone knew the bigO of some Stack operations? It wasn't listed in the lectures notes so thought I would ask here.
    userName:  May
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5
    
# Tree Trav Posts
- !!models.Post
    category:  !!models.Category
               id: 19
    title:     Basics of Tree Traversals
    content:      "<p>
       <h3>Tree Traversals</h3>
         <ul>
            <li> Similar to iterating over a list. </li>
            <li> Often want to visit/process every element in a tree. </li>
            <li> But... what makes sense for a tree? </li>
                <li> Trees are unidirectional (no links from child to parent) </li>
                <li> Usually use recursion (run-time stack / backtracking) </li>
            </ul>
            
            <h4> Depth-First Traversals </h4>
             <h5> pre-order </h5>
             <ul>
                <li> root </li>
                <li> left sub-tree </li>
                <li> right sub-tree </li>
             </ul>
             <pre>
                <code> 
                   def preOrderTraversal(node): <br>
                    if node is null: return <br>
                    process(node) <br>
                    preOrderTraversal(node.left) <br>
                    preOrderTraversal(node.right) <br>
               </code>
            </pre>
            <h5> in-order </h5>
             <ul>
                <li> left sub-tree </li>
                <li> root </li>
                <li> right sub-tree </li>
             </ul>
             <pre>
                <code> 
                   def preOrderTraversal(node):<br>
                    if node is null: return<br>
                    preOrderTraversal(node.left)<br>
                    process(node)<br>
                    preOrderTraversal(node.right)<br>
               </code>
            </pre>
            <h5> post-order </h5>
             <ul>
                <li> left sub-tree </li>
                <li> right sub-tree </li>
                <li> root </li>
             </ul>
             <pre>
                <code> 
                   def preOrderTraversal(node):<br>
                    if node is null: return<br>
                    preOrderTraversal(node.left)<br>
                    preOrderTraversal(node.right) <br>
                    process(node)
               </code>
            </pre>
            
            <h5>Example</h5><br> 
            <pre><code>            
     5 <br>   
    / \\ <br>
   2   8 <br>
  / \   \\ <br>
 1   3   15 <br>
        /  \\ <br>
       13  22 <br>
      / <br>
     12    <br>
            </code></pre>   
            
            
            <p> Pre-Order: 5, 2, 1, 3, 8, 15, 13, 12, 22 </p>
            <p> In-Order: 1, 2, 3, 5, 8, 12, 13, 15, 22 </p>
            <p> Post-Order: 1, 3, 2, 12, 13, 22, 15, 8, 5 </p>
            <p> Breadt-First Search: 5, 2, 8, 1, 3, 15, 13, 22, 12</p>
            
             </p>"
    userName:  Jason
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 19
    title:     Helpful vidoes and links for Tree Traversals
    content:   '<a href="http://www.geeksforgeeks.org/618/">GeeksforGeeks on Tree Traversals</a><br>
<a href="http://en.wikibooks.org/wiki/A-level_Computing/AQA/Problem_Solving,_Programming,_Operating_Systems,_Databases_and_Networking/Programming_Concepts/Tree_traversal_algorithms_for_a_binary_tree">Tree traversal algorithms for a binary tree</a><br>'
    userName:  Cindy
    isSticky:  true
    
- !!models.Post
    category:  !!models.Category
               id: 19
    title:     Algorithms for different traversals?
    content:   I understand the different types of traversals but I am having trouble with the actual implementation. Psuedocode would be really helpful.
    userName:  Lee
    isSticky:  false
    datePosted: 2000-11-10 11:45:09
    comments: 5
    votes: 5